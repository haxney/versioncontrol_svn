<?php

require_once(drupal_get_path('module', 'versioncontrol_svn') .'/tests/svn_helper.inc');

class SvnPreCommitTestCase extends SvnHelper {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('versioncontrol_svn pre-commit hook'),
      'description' => t('Test the functionality of the SVN hooks'),
      'group' => t('VersionControl'),
    );
  }

  /**
   * Test printing of help message when incorrect number arguments is given.
   */
  function testInvalidArgHelp() {
    $result = shell_exec($this->pre_commit_hook . ' 2>&1 1> /dev/null');
    $this->assertEqual(preg_match("/Usage: .+ <config file> REPO_PATH TX_NAME/", $result), 1,
      "Print help text when incorrect number of arguments is given.", "Shell Interaction");
  }

  /**
   * Test denying unauthorized user from committing to the repository.
   *
   * May be overly dependent on the exact strings returned by Subversion.
   */
  function testDenyUnauthorized() {
    // Check out the repository.
    $result = $this->WcCheckOut();
    $this->assertEqual($result, "Checked out revision 0.\n",
      "Check out the initial svn version.", "Shell Interaction");

    // Add a file to the working copy.
    $test_file = 'source.txt';
    $result = $this->WcAddSampleFile($test_file);
    $this->assertEqual($result, "A         $test_file\n",
      "Add test file to the repository.", "Shell Interaction");

    // Attempt to commit, but fail because the system user does not have access.
    $result = $this->WcCommit();
    $error_msg = t(
      "** ERROR: Version Control API cannot determine a repository\n".
      "** for the !commit-branch-or-tag information given by the VCS backend.",
      array('!commit-branch-or-tag' => t('commit'))
    );

    $this->assertEqual(preg_match('/' . preg_quote($error_msg) . '/', $result),
      1,
      "Cannot commit with no existing repository.",
      "Shell Interaction");

    // Add a repository, but don't register an account.
    $user = $this->drupalCreateUser(array('administer version control systems'));
    $this->drupalLogin($user);

    $menu_path = 'admin/project/versioncontrol-repositories/add-svn';
    $edit = array();
    $edit['repo_name'] = $this->randomName();
    $edit['root'] = $this->repo_url;
    $this->drupalPost($menu_path, $edit, t('Save repository'));

    $result = $this->WcCommit();
    $error_msg = t('** ERROR: !user does not have commit access to this repository.',
                 array('!user' => $this->server_user));
      $this->assertEqual(preg_match('/' . preg_quote($error_msg) . '/', $result),
        1,
        "Cannot commit to repository without an account on that repository.",
        "pre-commit hook");
  }

  /**
   * Test committing by an authorized user.
   */
  function testAuthorizedCommit () {
    $user = $this->drupalCreateUser(array('administer version control systems'));
    $this->drupalLogin($user);

    $menu_path = 'admin/project/versioncontrol-repositories/add-svn';
    $edit = array();
    $edit['repo_name'] = $this->randomName();
    $edit['root'] = $this->repo_url;
    $this->drupalPost($menu_path, $edit, t('Save repository'));

    $result = $this->WcCheckOut();
    $result = $this->WcAddSampleFile();

    $repo = array_shift(versioncontrol_get_repositories(array(
                   'names' => array($edit['repo_name'])
                 )));
    $repo_id = $repo['repo_id'];

    $menu_path = "versioncontrol/register/$user->uid/$repo_id";
    $edit = array();
    $edit['repo_id'] = $repo_id;

    $edit = array();
    $edit['account_name'] = $this->server_user;
//    $this->drupalPost($menu_path, $edit, t('Create Subversion account'));
    versioncontrol_insert_account($repo, $user->uid, $this->server_user);

    // TODO: should be able to commit with only 'use version control systems'

    $result = $this->WcCommit();
    $this->assertEqual(preg_match('/Committed revision [0-9]+\./', $result),
      1,
      "Successfully committed after authorization.",
      "pre-commit hook");
  }
}
